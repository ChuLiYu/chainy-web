import { useState, useEffect } from 'react';
import './App.css';
import './styles.css';
import {
  saveToken,
  clearToken,
  isAuthenticated as checkAuth,
  getCurrentUser,
  createAuthenticatedRequest,
  handleAuthError
} from './utils/auth.js';

const API_ENDPOINT = import.meta.env.VITE_CHAINY_API ?? 'https://9qwxcajqf9.execute-api.ap-northeast-1.amazonaws.com';

// Language translations
const translations = {
  zh: {
    title: 'CHAINY',
    slogan: '秒縮網址，WAGMI 🚀',
    subtitle: '短網址生成器',
    inputLabel: '目標網址',
    inputPlaceholder: 'https://your-website.com',
    validLabel: '✓ 有效',
    buttonGenerate: '生成短網址',
    buttonGenerating: '生成中...',
    successLabel: '生成成功',
    buttonCopy: '複製',
    buttonCopied: '已複製',
    buttonTest: '測試',
    footer: 'Powered by Chainy'
  },
  en: {
    title: 'CHAINY',
    slogan: 'Instant Links, WAGMI 🚀',
    subtitle: 'URL Shortener',
    inputLabel: 'Target URL',
    inputPlaceholder: 'https://your-website.com',
    validLabel: '✓ Valid',
    buttonGenerate: 'Generate Short URL',
    buttonGenerating: 'Generating...',
    successLabel: 'Success',
    buttonCopy: 'Copy',
    buttonCopied: 'Copied',
    buttonTest: 'Test',
    footer: 'Powered by Chainy'
  }
};

function App() {
  const [url, setUrl] = useState('');
  const [result, setResult] = useState(null);
  const [error, setError] = useState('');
  const [isLoading, setIsLoading] = useState(false);
  const [copied, setCopied] = useState(false);
  const [isValidUrl, setIsValidUrl] = useState(false);
  const [language, setLanguage] = useState('zh'); // Default to Chinese
  const [isAuthenticated, setIsAuthenticated] = useState(false);
  const [user, setUser] = useState(null);
  const [showLogin, setShowLogin] = useState(false);
  const [loginToken, setLoginToken] = useState('');

  const t = translations[language]; // Get current language translations

  useEffect(() => {
    const urlPattern = /^https?:\/\/.+/;
    setIsValidUrl(urlPattern.test(url));
  }, [url]);

  useEffect(() => {
    if (copied) {
      const timer = setTimeout(() => setCopied(false), 2000);
      return () => clearTimeout(timer);
    }
  }, [copied]);

  // Check authentication status on component mount
  useEffect(() => {
    const checkAuthStatus = () => {
      const authStatus = checkAuth();
      setIsAuthenticated(authStatus);
      if (authStatus) {
        setUser(getCurrentUser());
      } else {
        setUser(null);
      }
    };
    checkAuthStatus();
  }, []);

  const handleSubmit = async (e) => {
    e.preventDefault();
    if (!isValidUrl) return;

    setError('');
    setResult(null);
    setIsLoading(true);

    try {
      let response;

      if (isAuthenticated) {
        // Use authenticated request
        const options = createAuthenticatedRequest({
          method: 'POST',
          body: JSON.stringify({ target: url }),
        });
        response = await fetch(`${API_ENDPOINT}/links`, options);

        if (handleAuthError(response)) {
          setIsAuthenticated(false);
          setUser(null);
          throw new Error('Authentication expired. Please login again.');
        }
      } else {
        // Use unauthenticated request (will fail with 401/403)
        response = await fetch(`${API_ENDPOINT}/links`, {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify({ target: url }),
        });
      }

      if (!response.ok) {
        const err = await response.json();
        if (response.status === 401 || response.status === 403) {
          throw new Error('Authentication required. Please login to create short links.');
        }
        throw new Error(err.message || 'Failed to create short URL');
      }

      const data = await response.json();
      const shortUrl = (data.short_url ?? '').trim().length > 0 ? data.short_url : `${API_ENDPOINT}/${data.code}`;
      setResult({ ...data, shortUrl });
      setUrl('');
    } catch (err) {
      setError(err.message);
    } finally {
      setIsLoading(false);
    }
  };

  const handleCopy = () => {
    navigator.clipboard.writeText(result.shortUrl);
    setCopied(true);
  };

  const handleLogin = () => {
    if (loginToken.trim()) {
      try {
        saveToken(loginToken.trim());
        setIsAuthenticated(true);
        setUser(getCurrentUser());
        setShowLogin(false);
        setLoginToken('');
        setError('');
      } catch {
        setError('Invalid token format');
      }
    }
  };

  const handleLogout = () => {
    clearToken();
    setIsAuthenticated(false);
    setUser(null);
    setResult(null);
    setError('');
  };

  return (
    <div
      style={{
        minHeight: '100vh',
        background: 'linear-gradient(135deg, #0f172a 0%, #1e1b4b 25%, #312e81 50%, #1e1b4b 75%, #0f172a 100%)',
        color: 'white',
        display: 'flex',
        alignItems: 'center',
        justifyContent: 'center',
        padding: '48px 16px',
        position: 'relative',
        overflow: 'hidden'
      }}
    >
      {/* Background gradient orbs */}
      <div
        style={{
          position: 'absolute',
          top: 0,
          left: 0,
          right: 0,
          bottom: 0,
          pointerEvents: 'none'
        }}
      >
        <div
          style={{
            position: 'absolute',
            top: '10%',
            left: '10%',
            width: '300px',
            height: '300px',
            backgroundColor: 'rgba(96, 165, 250, 0.15)',
            borderRadius: '9999px',
            filter: 'blur(80px)',
            animation: 'float 6s ease-in-out infinite'
          }}
        ></div>
        <div
          style={{
            position: 'absolute',
            top: '10%',
            right: '10%',
            width: '300px',
            height: '300px',
            backgroundColor: 'rgba(168, 85, 247, 0.15)',
            borderRadius: '9999px',
            filter: 'blur(80px)',
            animation: 'float 6s ease-in-out infinite',
            animationDelay: '-3s'
          }}
        ></div>
      </div>

      {/* Top controls - redesigned for better UX */}
      <div
        className="fixed top-4 left-1/2 transform -translate-x-1/2 z-[1000]"
        style={{
          pointerEvents: 'none'
        }}
      >
        <div
          style={{
            display: 'flex',
            alignItems: 'center',
            gap: '8px',
            padding: '8px 16px',
            backgroundColor: 'rgba(15, 23, 42, 0.8)',
            backdropFilter: 'blur(20px)',
            border: '1px solid rgba(96, 165, 250, 0.2)',
            borderRadius: '16px',
            boxShadow: '0 8px 32px rgba(0, 0, 0, 0.3), 0 0 0 1px rgba(168, 85, 247, 0.1)',
            transition: 'all 0.3s ease',
            pointerEvents: 'auto'
          }}
        >
          {/* Authentication status - simplified */}
          <div
            style={{
              display: 'flex',
              alignItems: 'center',
              gap: '6px',
              padding: '4px 8px',
              backgroundColor: isAuthenticated ? 'rgba(52, 211, 153, 0.15)' : 'rgba(239, 68, 68, 0.15)',
              border: `1px solid ${isAuthenticated ? 'rgba(52, 211, 153, 0.3)' : 'rgba(239, 68, 68, 0.3)'}`,
              borderRadius: '8px',
              transition: 'all 0.3s ease'
            }}
          >
            <div
              style={{
                width: '6px',
                height: '6px',
                borderRadius: '50%',
                backgroundColor: isAuthenticated ? '#10b981' : '#ef4444',
                animation: 'pulse 2s cubic-bezier(0.4, 0, 0.6, 1) infinite'
              }}
            ></div>
            <span style={{
              fontSize: '0.75rem',
              fontWeight: '600',
              color: isAuthenticated ? '#10b981' : '#ef4444'
            }}>
              {isAuthenticated ? '已登入' : '未登入'}
            </span>
          </div>

          {/* Auth button - simplified */}
          {isAuthenticated ? (
            <button
              onClick={handleLogout}
              style={{
                padding: '6px 12px',
                backgroundColor: 'rgba(239, 68, 68, 0.15)',
                border: '1px solid rgba(239, 68, 68, 0.3)',
                borderRadius: '8px',
                color: '#ef4444',
                fontSize: '0.75rem',
                fontWeight: '600',
                cursor: 'pointer',
                transition: 'all 0.3s ease'
              }}
              onMouseEnter={(e) => {
                e.target.style.backgroundColor = 'rgba(239, 68, 68, 0.25)';
                e.target.style.transform = 'scale(1.05)';
              }}
              onMouseLeave={(e) => {
                e.target.style.backgroundColor = 'rgba(239, 68, 68, 0.15)';
                e.target.style.transform = 'scale(1)';
              }}
            >
              登出
            </button>
          ) : (
            <button
              onClick={() => setShowLogin(!showLogin)}
              style={{
                padding: '6px 12px',
                backgroundColor: 'rgba(59, 130, 246, 0.15)',
                border: '1px solid rgba(59, 130, 246, 0.3)',
                borderRadius: '8px',
                color: '#3b82f6',
                fontSize: '0.75rem',
                fontWeight: '600',
                cursor: 'pointer',
                transition: 'all 0.3s ease'
              }}
              onMouseEnter={(e) => {
                e.target.style.backgroundColor = 'rgba(59, 130, 246, 0.25)';
                e.target.style.transform = 'scale(1.05)';
              }}
              onMouseLeave={(e) => {
                e.target.style.backgroundColor = 'rgba(59, 130, 246, 0.15)';
                e.target.style.transform = 'scale(1)';
              }}
            >
              登入
            </button>
          )}

          {/* Language toggle - simplified */}
          <div
            style={{
              display: 'flex',
              alignItems: 'center',
              gap: '4px',
              padding: '4px 8px',
              backgroundColor: 'rgba(148, 163, 184, 0.1)',
              border: '1px solid rgba(148, 163, 184, 0.2)',
              borderRadius: '8px',
              transition: 'all 0.3s ease'
            }}
          >
            <span style={{
              fontSize: '0.875rem',
              color: '#94a3b8'
            }}>🌐</span>
            
            <button
              onClick={() => setLanguage('zh')}
              style={{
                padding: '2px 6px',
                backgroundColor: language === 'zh' ? 'rgba(59, 130, 246, 0.2)' : 'transparent',
                border: 'none',
                borderRadius: '4px',
                color: language === 'zh' ? '#3b82f6' : '#94a3b8',
                fontSize: '0.75rem',
                fontWeight: language === 'zh' ? '600' : '500',
                cursor: 'pointer',
                transition: 'all 0.3s ease'
              }}
              onMouseEnter={(e) => {
                if (language !== 'zh') {
                  e.target.style.color = '#cbd5e1';
                }
              }}
              onMouseLeave={(e) => {
                if (language !== 'zh') {
                  e.target.style.color = '#94a3b8';
                }
              }}
            >
              中文
            </button>

            <div style={{
              width: '1px',
              height: '12px',
              backgroundColor: 'rgba(148, 163, 184, 0.3)'
            }}></div>

            <button
              onClick={() => setLanguage('en')}
              style={{
                padding: '2px 6px',
                backgroundColor: language === 'en' ? 'rgba(59, 130, 246, 0.2)' : 'transparent',
                border: 'none',
                borderRadius: '4px',
                color: language === 'en' ? '#3b82f6' : '#94a3b8',
                fontSize: '0.75rem',
                fontWeight: language === 'en' ? '600' : '500',
                cursor: 'pointer',
                transition: 'all 0.3s ease'
              }}
              onMouseEnter={(e) => {
                if (language !== 'en') {
                  e.target.style.color = '#cbd5e1';
                }
              }}
              onMouseLeave={(e) => {
                if (language !== 'en') {
                  e.target.style.color = '#94a3b8';
                }
              }}
            >
              EN
            </button>
          </div>
        </div>
      </div>
        {/* Authentication status */}
        <div
          style={{
            display: 'flex',
            alignItems: 'center',
            gap: '8px',
            padding: '6px 12px',
            backgroundColor: isAuthenticated ? 'rgba(52, 211, 153, 0.1)' : 'rgba(239, 68, 68, 0.1)',
            border: `1px solid ${isAuthenticated ? 'rgba(52, 211, 153, 0.3)' : 'rgba(239, 68, 68, 0.3)'}`,
            borderRadius: '999px',
            transition: 'all 0.3s ease',
            pointerEvents: 'auto'
          }}
        >
          <div
            style={{
              width: '8px',
              height: '8px',
              borderRadius: '9999px',
              backgroundColor: isAuthenticated ? 'rgb(52, 211, 153)' : 'rgb(239, 68, 68)',
              animation: 'pulse 2s cubic-bezier(0.4, 0, 0.6, 1) infinite'
            }}
          ></div>
          <span style={{
            fontSize: '0.75rem',
            fontWeight: 'bold',
            color: isAuthenticated ? 'rgb(52, 211, 153)' : 'rgb(239, 68, 68)',
            textTransform: 'uppercase',
            letterSpacing: '0.1em'
          }}>
            {isAuthenticated ? '已登入' : '未登入'}
          </span>
          {isAuthenticated && user && (
            <span style={{
              fontSize: '0.75rem',
              color: 'rgb(148, 163, 184)',
              marginLeft: '4px'
            }}>
              ({user.email || user.userId})
            </span>
          )}
        </div>

        {/* Auth buttons */}
        <div
          style={{
            display: 'flex',
            alignItems: 'center',
            gap: '4px',
            padding: '6px 8px',
            backgroundColor: 'rgba(15, 23, 42, 0.8)',
            backdropFilter: 'blur(10px)',
            border: '1px solid rgba(148, 163, 184, 0.2)',
            borderRadius: '999px',
            transition: 'all 0.3s ease',
            pointerEvents: 'auto'
          }}
        >
          {isAuthenticated ? (
            <button
              onClick={handleLogout}
              style={{
                padding: '6px 12px',
                backgroundColor: 'rgba(239, 68, 68, 0.2)',
                border: '1px solid rgba(239, 68, 68, 0.3)',
                borderRadius: '999px',
                color: 'rgb(248, 113, 113)',
                fontSize: '0.75rem',
                fontWeight: 'bold',
                cursor: 'pointer',
                transition: 'all 0.3s ease',
                textTransform: 'uppercase',
                letterSpacing: '0.1em'
              }}
              onMouseEnter={(e) => {
                e.target.style.backgroundColor = 'rgba(239, 68, 68, 0.3)';
              }}
              onMouseLeave={(e) => {
                e.target.style.backgroundColor = 'rgba(239, 68, 68, 0.2)';
              }}
            >
              登出
            </button>
          ) : (
            <button
              onClick={() => setShowLogin(!showLogin)}
              style={{
                padding: '6px 12px',
                backgroundColor: 'rgba(59, 130, 246, 0.2)',
                border: '1px solid rgba(59, 130, 246, 0.3)',
                borderRadius: '999px',
                color: 'rgb(96, 165, 250)',
                fontSize: '0.75rem',
                fontWeight: 'bold',
                cursor: 'pointer',
                transition: 'all 0.3s ease',
                textTransform: 'uppercase',
                letterSpacing: '0.1em'
              }}
              onMouseEnter={(e) => {
                e.target.style.backgroundColor = 'rgba(59, 130, 246, 0.3)';
              }}
              onMouseLeave={(e) => {
                e.target.style.backgroundColor = 'rgba(59, 130, 246, 0.2)';
              }}
            >
              登入
            </button>
          )}
        </div>

        {/* Language toggle button */}
        <div
          style={{
            display: 'flex',
            alignItems: 'center',
            gap: '4px',
            padding: '6px 8px',
            backgroundColor: 'rgba(15, 23, 42, 0.8)',
            backdropFilter: 'blur(10px)',
            border: '1px solid rgba(148, 163, 184, 0.2)',
            borderRadius: '999px',
            transition: 'all 0.3s ease',
            pointerEvents: 'auto'
          }}
        >
          <span style={{
            fontSize: '1rem',
            marginLeft: '4px',
            marginRight: '4px'
          }}>🌐</span>

          <button
            onClick={() => setLanguage('zh')}
            style={{
              padding: '6px 12px',
              backgroundColor: language === 'zh' ? 'rgba(59, 130, 246, 0.5)' : 'transparent',
              border: 'none',
              borderRadius: '999px',
              color: language === 'zh' ? 'rgb(255, 255, 255)' : 'rgb(148, 163, 184)',
              fontSize: '0.875rem',
              fontWeight: language === 'zh' ? '700' : '500',
              cursor: 'pointer',
              transition: 'all 0.3s ease'
            }}
            onMouseEnter={(e) => {
              if (language !== 'zh') {
                e.target.style.color = 'rgb(203, 213, 225)';
              }
            }}
            onMouseLeave={(e) => {
              if (language !== 'zh') {
                e.target.style.color = 'rgb(148, 163, 184)';
              }
            }}
          >
            中文
          </button>

          <div style={{
            width: '1px',
            height: '16px',
            backgroundColor: 'rgba(148, 163, 184, 0.3)'
          }}></div>

          <button
            onClick={() => setLanguage('en')}
            style={{
              padding: '6px 12px',
              backgroundColor: language === 'en' ? 'rgba(59, 130, 246, 0.5)' : 'transparent',
              border: 'none',
              borderRadius: '999px',
              color: language === 'en' ? 'rgb(255, 255, 255)' : 'rgb(148, 163, 184)',
              fontSize: '0.875rem',
              fontWeight: language === 'en' ? '700' : '500',
              cursor: 'pointer',
              transition: 'all 0.3s ease'
            }}
            onMouseEnter={(e) => {
              if (language !== 'en') {
                e.target.style.color = 'rgb(203, 213, 225)';
              }
            }}
            onMouseLeave={(e) => {
              if (language !== 'en') {
                e.target.style.color = 'rgb(148, 163, 184)';
              }
            }}
          >
            EN
          </button>
        </div>

        {/* Main content container */}
        <div
          style={{
            display: 'flex',
            flexDirection: 'column',
            alignItems: 'center',
            justifyContent: 'center',
            width: '100%',
            maxWidth: '700px',
            margin: '0 auto',
            padding: '100px 24px 0 24px',
            position: 'relative',
            zIndex: 10
          }}
        >
          {/* Title section */}
          <div
            style={{
              textAlign: 'center',
              marginBottom: '40px',
              animation: 'slideInUp 0.8s ease-out forwards'
            }}
          >
            <h1
              style={{
                fontSize: '4.5rem',
                fontWeight: '900',
                marginBottom: '16px',
                letterSpacing: '-0.025em',
                background: 'linear-gradient(to right, #60a5fa, #a855f7, #ec4899, #a855f7, #60a5fa)',
                backgroundSize: '300% auto',
                WebkitBackgroundClip: 'text',
                WebkitTextFillColor: 'transparent',
                backgroundClip: 'text',
                animation: 'gradient 3s ease infinite'
              }}
            >
              {t.title}
            </h1>
            <p style={{
              fontSize: '1.5rem',
              color: 'white',
              marginBottom: '8px',
              fontWeight: '600',
              textShadow: '0 0 20px rgba(168, 85, 247, 0.3)',
              letterSpacing: '0.05em'
            }}>{t.slogan}</p>
            <p style={{
              color: 'rgba(203, 213, 225, 0.8)',
              fontSize: '0.875rem',
              letterSpacing: '0.1em',
              textTransform: 'uppercase',
              fontWeight: '500'
            }}>{t.subtitle}</p>
          </div>

          {/* Main card */}
          <div
            style={{
              position: 'relative',
              borderRadius: '20px',
              padding: '32px',
              backgroundColor: 'rgba(15, 23, 42, 0.7)',
              backdropFilter: 'blur(20px)',
              border: '1px solid rgba(96, 165, 250, 0.2)',
              boxShadow: '0 20px 40px -12px rgba(0, 0, 0, 0.4), 0 0 0 1px rgba(168, 85, 247, 0.1)',
              animation: 'slideInUp 0.8s ease-out 0.2s forwards',
              transition: 'all 0.5s ease',
              width: '100%',
              maxWidth: '520px'
            }}
            onMouseEnter={(e) => {
              e.currentTarget.style.borderColor = 'rgba(168, 85, 247, 0.4)';
              e.currentTarget.style.boxShadow = '0 25px 50px -12px rgba(0, 0, 0, 0.4), 0 0 0 1px rgba(168, 85, 247, 0.2)';
            }}
            onMouseLeave={(e) => {
              e.currentTarget.style.borderColor = 'rgba(96, 165, 250, 0.2)';
              e.currentTarget.style.boxShadow = '0 25px 50px -12px rgba(0, 0, 0, 0.4), 0 0 0 1px rgba(168, 85, 247, 0.1)';
            }}
          >
            {/* Top decorative line */}
            <div
              className="absolute top-0 left-1/4 right-1/4"
              style={{
                height: '1px',
                background: 'linear-gradient(to right, transparent, #60a5fa, #a855f7, transparent)'
              }}
            ></div>

            {/* Login form */}
            {showLogin && !isAuthenticated && (
              <div
                style={{
                  marginBottom: '32px',
                  padding: '24px',
                  backgroundColor: 'rgba(2, 6, 23, 0.8)',
                  borderRadius: '12px',
                  border: '1px solid rgba(59, 130, 246, 0.3)',
                  animation: 'fadeIn 0.6s ease-out forwards'
                }}
              >
                <h3 style={{
                  fontSize: '1.125rem',
                  fontWeight: 'bold',
                  color: 'rgb(96, 165, 250)',
                  marginBottom: '16px',
                  textAlign: 'center'
                }}>
                  登入以創建短連結
                </h3>
                <div style={{ display: 'flex', flexDirection: 'column', gap: '12px' }}>
                  <input
                    type="text"
                    value={loginToken}
                    onChange={(e) => setLoginToken(e.target.value)}
                    placeholder="請輸入 JWT Token"
                    style={{
                      width: '100%',
                      backgroundColor: 'rgba(2, 6, 23, 0.8)',
                      border: '2px solid rgba(51, 65, 85, 0.5)',
                      borderRadius: '8px',
                      padding: '12px 16px',
                      fontSize: '14px',
                      color: 'white',
                      outline: 'none',
                      transition: 'all 0.3s ease'
                    }}
                    onFocus={(e) => {
                      e.target.style.borderColor = 'rgb(59, 130, 246)';
                      e.target.style.boxShadow = '0 0 0 4px rgba(59, 130, 246, 0.15)';
                    }}
                    onBlur={(e) => {
                      e.target.style.borderColor = 'rgba(51, 65, 85, 0.5)';
                      e.target.style.boxShadow = 'none';
                    }}
                  />
                  <div style={{ display: 'flex', gap: '8px' }}>
                    <button
                      type="button"
                      onClick={handleLogin}
                      disabled={!loginToken.trim()}
                      style={{
                        flex: 1,
                        backgroundColor: 'rgb(37, 99, 235)',
                        borderRadius: '8px',
                        padding: '12px',
                        fontSize: '14px',
                        fontWeight: 'bold',
                        border: 'none',
                        cursor: loginToken.trim() ? 'pointer' : 'not-allowed',
                        opacity: loginToken.trim() ? '1' : '0.4',
                        color: 'white',
                        transition: 'all 0.3s ease'
                      }}
                      onMouseEnter={(e) => {
                        if (loginToken.trim()) {
                          e.target.style.backgroundColor = 'rgb(29, 78, 216)';
                        }
                      }}
                      onMouseLeave={(e) => {
                        if (loginToken.trim()) {
                          e.target.style.backgroundColor = 'rgb(37, 99, 235)';
                        }
                      }}
                    >
                      登入
                    </button>
                    <button
                      type="button"
                      onClick={() => setShowLogin(false)}
                      style={{
                        flex: 1,
                        backgroundColor: 'rgba(51, 65, 85, 0.5)',
                        borderRadius: '8px',
                        padding: '12px',
                        fontSize: '14px',
                        fontWeight: 'bold',
                        border: 'none',
                        cursor: 'pointer',
                        color: 'white',
                        transition: 'all 0.3s ease'
                      }}
                      onMouseEnter={(e) => {
                        e.target.style.backgroundColor = 'rgba(51, 65, 85, 0.7)';
                      }}
                      onMouseLeave={(e) => {
                        e.target.style.backgroundColor = 'rgba(51, 65, 85, 0.5)';
                      }}
                    >
                      取消
                    </button>
                  </div>
                  <p style={{
                    fontSize: '0.75rem',
                    color: 'rgb(148, 163, 184)',
                    textAlign: 'center',
                    marginTop: '8px'
                  }}>
                    需要 JWT Token？請聯繫管理員獲取
                  </p>
                </div>
              </div>
            )}

            <form onSubmit={handleSubmit} style={{ display: 'flex', flexDirection: 'column', gap: '32px' }}>
              {/* Input field section */}
              <div>
                <div style={{
                  marginBottom: '12px',
                  display: 'flex',
                  alignItems: 'center',
                  justifyContent: 'space-between'
                }}>
                  <label style={{
                    fontSize: '0.75rem',
                    fontWeight: 'bold',
                    color: 'rgba(203, 213, 225, 0.9)',
                    textTransform: 'uppercase',
                    letterSpacing: '0.1em'
                  }}>
                    {t.inputLabel}
                  </label>
                  {isValidUrl && url && (
                    <span style={{
                      fontSize: '0.75rem',
                      color: '#10b981',
                      fontFamily: 'monospace',
                      fontWeight: 'bold'
                    }}>{t.validLabel}</span>
                  )}
                </div>

                <input
                  type="url"
                  required
                  value={url}
                  onChange={(e) => setUrl(e.target.value)}
                  placeholder={t.inputPlaceholder}
                  style={{
                    width: '100%',
                    backgroundColor: 'rgba(2, 6, 23, 0.9)',
                    border: '2px solid rgba(96, 165, 250, 0.3)',
                    borderRadius: '12px',
                    padding: '16px 20px',
                    fontSize: '16px',
                    color: 'white',
                    outline: 'none',
                    transition: 'all 0.3s ease',
                    boxShadow: '0 4px 6px -1px rgba(0, 0, 0, 0.1)'
                  }}
                  onMouseEnter={(e) => {
                    if (document.activeElement !== e.target) {
                      e.target.style.borderColor = 'rgba(168, 85, 247, 0.5)';
                      e.target.style.transform = 'translateY(-2px)';
                    }
                  }}
                  onMouseLeave={(e) => {
                    if (document.activeElement !== e.target) {
                      e.target.style.borderColor = 'rgba(51, 65, 85, 0.5)';
                      e.target.style.transform = 'translateY(0)';
                    }
                  }}
                  onFocus={(e) => {
                    e.target.style.borderColor = '#a855f7';
                    e.target.style.boxShadow = '0 0 0 4px rgba(168, 85, 247, 0.15), 0 10px 25px rgba(168, 85, 247, 0.2)';
                    e.target.style.transform = 'translateY(-2px)';
                  }}
                  onBlur={(e) => {
                    e.target.style.borderColor = 'rgba(51, 65, 85, 0.5)';
                    e.target.style.boxShadow = 'none';
                    e.target.style.transform = 'translateY(0)';
                  }}
                />
              </div>

              {/* Submit button */}
              <button
                type="submit"
                disabled={isLoading || !isValidUrl}
                style={{
                  width: '100%',
                  background: 'linear-gradient(to right, #1e40af, #7c3aed, #be185d, #7c3aed, #1e40af)',
                  backgroundSize: '300% auto',
                  borderRadius: '12px',
                  padding: '16px',
                  fontSize: '16px',
                  fontWeight: 'bold',
                  textTransform: 'uppercase',
                  letterSpacing: '0.1em',
                  border: 'none',
                  cursor: isLoading || !isValidUrl ? 'not-allowed' : 'pointer',
                  opacity: isLoading || !isValidUrl ? '0.4' : '1',
                  transition: 'all 0.3s ease',
                  position: 'relative',
                  overflow: 'hidden',
                  animation: 'gradient 3s ease infinite'
                }}
                onMouseEnter={(e) => {
                  if (!isLoading && isValidUrl) {
                    e.target.style.transform = 'scale(1.02)';
                    e.target.style.boxShadow = '0 10px 40px rgba(168, 85, 247, 0.5)';
                  }
                }}
                onMouseLeave={(e) => {
                  e.target.style.transform = 'scale(1)';
                  e.target.style.boxShadow = 'none';
                }}
                onMouseDown={(e) => {
                  if (!isLoading && isValidUrl) {
                    e.target.style.transform = 'scale(0.98)';
                  }
                }}
                onMouseUp={(e) => {
                  if (!isLoading && isValidUrl) {
                    e.target.style.transform = 'scale(1.02)';
                  }
                }}
              >
                {isLoading ? t.buttonGenerating : t.buttonGenerate}
              </button>

              {/* Error message */}
              {error && (
                <div
                  style={{
                    borderRadius: '12px',
                    padding: '16px',
                    backgroundColor: 'rgba(239, 68, 68, 0.1)',
                    border: '1px solid rgba(239, 68, 68, 0.3)',
                    animation: 'fadeIn 0.6s ease-out forwards'
                  }}
                >
                  <p style={{
                    color: 'rgb(248, 113, 113)',
                    fontSize: '0.875rem'
                  }}>{error}</p>
                </div>
              )}
            </form>

            {/* Result display */}
            {result && (
              <div
                style={{
                  marginTop: '32px',
                  paddingTop: '32px',
                  borderTop: '1px solid rgba(51, 65, 85, 0.5)',
                  animation: 'fadeIn 0.6s ease-out forwards'
                }}
              >
                <div style={{ marginBottom: '16px' }}>
                  <div style={{
                    display: 'flex',
                    alignItems: 'center',
                    gap: '8px',
                    marginBottom: '8px'
                  }}>
                    <div
                      style={{
                        width: '8px',
                        height: '8px',
                        borderRadius: '9999px',
                        backgroundColor: '#10b981',
                        animation: 'pulse 2s cubic-bezier(0.4, 0, 0.6, 1) infinite'
                      }}
                    ></div>
                    <span style={{
                      fontSize: '0.75rem',
                      fontWeight: 'bold',
                      color: '#10b981',
                      textTransform: 'uppercase',
                      letterSpacing: '0.1em'
                    }}>{t.successLabel}</span>
                  </div>

                  <div
                    style={{
                      borderRadius: '8px',
                      padding: '16px',
                      marginBottom: '16px',
                      backgroundColor: 'rgba(2, 6, 23, 0.8)'
                    }}
                  >
                    <a
                      href={result.shortUrl}
                      target="_blank"
                      rel="noopener noreferrer"
                      style={{
                        color: '#60a5fa',
                        fontFamily: 'monospace',
                        fontSize: '0.875rem',
                        wordBreak: 'break-all',
                        transition: 'color 0.2s ease',
                        textDecoration: 'none'
                      }}
                      onMouseEnter={(e) => {
                        e.target.style.color = '#93c5fd';
                      }}
                      onMouseLeave={(e) => {
                        e.target.style.color = '#60a5fa';
                      }}
                    >
                      {result.shortUrl}
                    </a>
                  </div>
                </div>

                <div style={{
                  display: 'grid',
                  gridTemplateColumns: 'repeat(2, 1fr)',
                  gap: '12px'
                }}>
                  <button
                    onClick={handleCopy}
                    style={{
                      backgroundColor: '#059669',
                      borderRadius: '8px',
                      padding: '12px',
                      fontSize: '14px',
                      fontWeight: 'bold',
                      textTransform: 'uppercase',
                      letterSpacing: '0.1em',
                      border: 'none',
                      cursor: 'pointer',
                      transition: 'all 0.3s ease'
                    }}
                    onMouseEnter={(e) => {
                      e.target.style.transform = 'scale(1.05)';
                      e.target.style.backgroundColor = '#10b981';
                    }}
                    onMouseLeave={(e) => {
                      e.target.style.transform = 'scale(1)';
                      e.target.style.backgroundColor = '#059669';
                    }}
                    onMouseDown={(e) => {
                      e.target.style.transform = 'scale(0.95)';
                    }}
                    onMouseUp={(e) => {
                      e.target.style.transform = 'scale(1.05)';
                    }}
                  >
                    {copied ? t.buttonCopied : t.buttonCopy}
                  </button>

                  <a
                    href={result.shortUrl}
                    target="_blank"
                    rel="noopener noreferrer"
                    style={{
                      backgroundColor: '#1e293b',
                      borderRadius: '8px',
                      padding: '12px',
                      fontSize: '14px',
                      fontWeight: 'bold',
                      textTransform: 'uppercase',
                      letterSpacing: '0.1em',
                      textAlign: 'center',
                      textDecoration: 'none',
                      color: 'white',
                      display: 'block',
                      transition: 'all 0.3s ease'
                    }}
                    onMouseEnter={(e) => {
                      e.target.style.transform = 'scale(1.05)';
                      e.target.style.backgroundColor = 'rgb(51, 65, 85)';
                    }}
                    onMouseLeave={(e) => {
                      e.target.style.transform = 'scale(1)';
                      e.target.style.backgroundColor = 'rgb(30, 41, 59)';
                    }}
                    onMouseDown={(e) => {
                      e.target.style.transform = 'scale(0.95)';
                    }}
                    onMouseUp={(e) => {
                      e.target.style.transform = 'scale(1.05)';
                    }}
                  >
                    {t.buttonTest}
                  </a>
                </div>
              </div>
            )}
          </div>

          {/* Footer */}
          <div
            style={{
              textAlign: 'center',
              marginTop: '24px',
              color: 'rgb(71, 85, 105)',
              fontSize: '0.75rem',
              textTransform: 'uppercase',
              letterSpacing: '0.1em',
              animation: 'slideInUp 0.8s ease-out 0.4s forwards'
            }}
          >
            {t.footer}
          </div>
        </div>
      </div>
    </div>
  );
}

export default App;
